% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nocodb.gen.R
\name{req_auth}
\alias{req_auth}
\title{Authenticate NocoDB HTTP request}
\usage{
req_auth(
  req,
  email = pal::pkg_config_val("email"),
  password = pal::pkg_config_val("password"),
  api_token = pal::pkg_config_val("api_token")
)
}
\arguments{
\item{req}{A httr2 \link[httr2]{request} object.}

\item{email}{\code{\link[base:character]{character(1)}}\cr
E-mail address of the NocoDB user to authenticate with.}

\item{password}{\code{\link[base:character]{character(1)}}\cr
Password of the NocoDB user to authenticate with.}

\item{api_token}{\code{\link[base:character]{character(1)}}\cr
NocoDB \href{https://docs.nocodb.com/account-settings/api-tokens/}{API token}. Takes precedence over \code{email} and \code{password} if provided.}
}
\value{
A modified HTTP \link[httr2]{request}.
}
\description{
Adds an authentication header to an HTTP request intended to call a NocoDB API endpoint. The following credential sources are consulted in descending order
and the first one applicable is used:
\enumerate{
\item If \code{api_token} is provided, it is directly added to the request as \code{xc-token} header.
\item If \code{email} is provided, the corresponding user has \link[=sign_in]{signed in} before in the \emph{current} \R session and the generated access token is not yet
expired, it is re-used.
\item If \code{email} is provided, the corresponding user has \link[=sign_in]{signed in} before in a \emph{past} \R session and hence there's a cached refresh token available
which is not yet expired, it's used to generate a fresh access token.
\item If \code{email} and \code{password} are provided, they are used to newly \code{\link[=sign_in]{sign_in()}} the corresponding user.
}

Access tokens (sources 2â€“4 above) are added to the request as \code{xc-auth} header. Other than the \code{api_token}, they expire after a certain amount of time,
configured by the NocoDB server via \href{https://docs.nocodb.com/getting-started/self-hosted/environment-variables/}{\code{NC_JWT_EXPIRES_IN}} (defaults to 10 hours).
}
\section{Invalid token errors}{
\itemize{
\item If you \emph{did} provide an \code{api_token} and encounter an \strong{\verb{Invalid token}} error, it simply means the \code{api_token} is invalid (e.g. because it was revoked).
\item If you did \emph{not} provide an \code{api_token} and encounter an \strong{\verb{Invalid token}} error, it means the access token generated by the last call to \code{\link[=sign_in]{sign_in()}} in
the \emph{current} \R session has expired or was revoked meanwhile. This should only happen in rare edge cases since expired access tokens aren't re-used by
\code{req_auth()}.
\item If you encounter an \strong{\verb{Invalid refresh token}} error, it means the refresh token cached to disk by the last call to \code{\link[=sign_in]{sign_in()}} in a \emph{past} \R session has
expired meanwhile. This should only happen in rare edge cases since expired refresh tokens aren't re-used by \code{req_auth()}.
}

The latter two errors should resolve by manually invoking \code{\link[=sign_in]{sign_in()}}.

If you would like to avoid token expiration errors altogether, consider using an \href{https://docs.nocodb.com/account-settings/api-tokens/}{API token}
(\code{api_token}) instead of \code{email} and \code{password}.
}

\seealso{
Other common functions:
\code{\link{api}()},
\code{\link{req_basic}()}

Other functions to manage NocoDB authentication:
\code{\link{api_tokens}()},
\code{\link{assert_super_admin}()},
\code{\link{create_api_token}()},
\code{\link{delete_api_token}()},
\code{\link{is_signed_in}()},
\code{\link{is_super_admin}()},
\code{\link{refresh_sign_in}()},
\code{\link{sign_in}()},
\code{\link{sign_out}()},
\code{\link{sign_up_user}()}
}
\concept{auth}
\concept{common}
\keyword{internal}
