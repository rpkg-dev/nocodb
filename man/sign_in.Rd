% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nocodb.gen.R
\name{sign_in}
\alias{sign_in}
\title{Sign in NocoDB user}
\usage{
sign_in(
  hostname = pal::pkg_config_val(key = "hostname", pkg = this_pkg),
  email = pal::pkg_config_val(key = "email", pkg = this_pkg),
  password = pal::pkg_config_val(key = "password", pkg = this_pkg),
  cache_refresh_token = TRUE
)
}
\arguments{
\item{hostname}{NocoDB server \href{https://en.wikipedia.org/wiki/Hostname}{hostname}. A character scalar.}

\item{email}{E-mail address of the NocoDB user to authenticate with.}

\item{password}{Password of the NocoDB user to authenticate with.}

\item{cache_refresh_token}{Whether or not to write the refresh token included in the API response to disk (in the OS user cache directory). This allows to
refresh an expired access token using \code{\link[=refresh_sign_in]{refresh_sign_in()}}.}
}
\value{
The generated access token as a character scalar, invisibly.
}
\description{
Authenticates a NocoDB user by \code{email} and \code{password} via the
\href{https://data-apis-v1.nocodb.com/#tag/Auth/operation/auth-signin}{\code{POST /api/v1/auth/user/signin}} API endpoint. An access token
(\href{https://de.wikipedia.org/wiki/JSON_Web_Token}{JWT}) is generated in the process and stored in the package environment to be used in subsequent API calls.
}
\details{
The generated access token expires after a certain amount of time, configured by the NocoDB server via
\href{https://docs.nocodb.com/getting-started/self-hosted/environment-variables/}{\code{NC_JWT_EXPIRES_IN}} (defaults to 10 hours). To allow for a frictionless user
experience, a separate refresh token is cached to disk in a cookie file (unless \code{cache_refresh_token = FALSE}). \code{\link[=refresh_sign_in]{refresh_sign_in()}} can then be used to
generate a new access token if necessary. Taken together, this allows for a user to remain authenticated across \R session restarts (unless the refresh token
has expired or been invalidated by \code{\link[=sign_out]{sign_out()}} in the meantime).
}
\seealso{
Other functions to manage NocoDB authentication:
\code{\link{api_tokens}()},
\code{\link{assert_super_admin}()},
\code{\link{is_signed_in}()},
\code{\link{is_super_admin}()},
\code{\link{refresh_sign_in}()},
\code{\link{req_auth}()},
\code{\link{sign_out}()},
\code{\link{sign_up_user}()}

Other user: 
\code{\link{assert_super_admin}()},
\code{\link{is_signed_in}()},
\code{\link{is_super_admin}()},
\code{\link{refresh_sign_in}()},
\code{\link{sign_out}()}
}
\concept{auth}
\concept{user}
