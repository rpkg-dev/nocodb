[{"path":"https://nocodb.rpkg.dev/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://nocodb.rpkg.dev/dev/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://nocodb.rpkg.dev/dev/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://nocodb.rpkg.dev/dev/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://nocodb.rpkg.dev/dev/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://nocodb.rpkg.dev/dev/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://nocodb.rpkg.dev/dev/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://nocodb.rpkg.dev/dev/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://nocodb.rpkg.dev/dev/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://nocodb.rpkg.dev/dev/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://nocodb.rpkg.dev/dev/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://nocodb.rpkg.dev/dev/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://nocodb.rpkg.dev/dev/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://nocodb.rpkg.dev/dev/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://nocodb.rpkg.dev/dev/LICENSE.html","id":"id_13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"https://nocodb.rpkg.dev/dev/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://nocodb.rpkg.dev/dev/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://nocodb.rpkg.dev/dev/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://nocodb.rpkg.dev/dev/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee.","code":""},{"path":"https://nocodb.rpkg.dev/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Salim Brüggemann. Author, maintainer.","code":""},{"path":"https://nocodb.rpkg.dev/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Brüggemann S (2024). nocodb: Use NocoDB's RESTful APIs. R package version 0.0.9000, https://gitlab.com/rpkg.dev/nocodb, https://nocodb.rpkg.dev.","code":"@Manual{,   title = {nocodb: Use NocoDB's RESTful APIs},   author = {Salim Brüggemann},   year = {2024},   note = {R package version 0.0.9000, https://gitlab.com/rpkg.dev/nocodb},   url = {https://nocodb.rpkg.dev}, }"},{"path":"https://nocodb.rpkg.dev/dev/index.html","id":"nocodb","dir":"","previous_headings":"","what":"Use NocoDB's RESTful APIs","title":"Use NocoDB's RESTful APIs","text":"nocodb allows work NocoDB’s RESTful APIs R. NocoDB web application provides intuitive spreadsheet-like front-end relational databases.","code":""},{"path":"https://nocodb.rpkg.dev/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Use NocoDB's RESTful APIs","text":"install latest development version nocodb, run following R:","code":"if (!(\"remotes\" %in% rownames(installed.packages()))) {   install.packages(pkgs = \"remotes\",                    repos = \"https://cloud.r-project.org/\") }  remotes::install_gitlab(repo = \"rpkg.dev/nocodb\")"},{"path":"https://nocodb.rpkg.dev/dev/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Use NocoDB's RESTful APIs","text":"(function) reference found .","code":""},{"path":"https://nocodb.rpkg.dev/dev/index.html","id":"package-configuration","dir":"","previous_headings":"","what":"Package configuration","title":"Use NocoDB's RESTful APIs","text":"nocodb’s functionality controlled via package-specific global configuration can either set via R options environment variables (former take precedence). configuration includes:","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/index.html","id":"r-markdown-format","dir":"","previous_headings":"Development","what":"R Markdown format","title":"Use NocoDB's RESTful APIs","text":"package’s source code written R Markdown file format facilitate practices commonly referred literate programming. allows actual code freely mixed explanatory supplementary information expressive Markdown format instead rely # comments . .gen.R suffixed R source code found R/ generated respective R Markdown counterparts Rmd/ using pkgpurl::purl_rmd()1. Always make changes .Rmd files – never .R files – run pkgpurl::purl_rmd() regenerate R source files.","code":""},{"path":"https://nocodb.rpkg.dev/dev/index.html","id":"coding-style","dir":"","previous_headings":"Development","what":"Coding style","title":"Use NocoDB's RESTful APIs","text":"package borrows lot Tidyverse design philosophies. R code adheres principles specified Tidyverse Design Guide wherever possible formatted according Tidyverse Style Guide (TSG) following exceptions: Line width limited 160 characters, double limit proposed TSG (80 characters ridiculously little given today’s high-resolution wide screen monitors). Furthermore, preferred style breaking long lines differs. Instead wrapping directly expression’s opening bracket suggested TSG, prefer two fewer line breaks indent subsequent lines within expression opening bracket: results less vertical horizontal spread code better readability pipes. Usage magrittr’s compound assignment pipe-operator %<>% desirable2. Usage R’s right-hand assignment operator -> allowed3. R source code split several files suggested TSG instead (far possible) kept single file Rmd/nocodb.Rmd well-structured thanks Markdown support. far possible, deviations TSG plus additional restrictions formally specified pkgpurl::default_linters, (default) used pkgpurl::lint_rmd(), turn recommended way lint package.","code":"# TSG proposes this do_something_very_complicated(   something = \"that\",   requires = many,   arguments = \"some of which may be long\" )  # we prefer this do_something_very_complicated(something = \"that\",                               requires = many,                               arguments = \"some of which may be long\")"},{"path":"https://nocodb.rpkg.dev/dev/reference/access_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Get user's current access token — access_token","title":"Get user's current access token — access_token","text":"Retrieves access token belonging user specified email corresponding package environment. access token available user signed refreshed access token current R session.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/access_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get user's current access token — access_token","text":"","code":"access_token(   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg, require = TRUE) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/access_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get user's current access token — access_token","text":"hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate .","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/access_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get user's current access token — access_token","text":"Access token character scalar. NA_character_ access token exists hostname email.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/add_user.html","id":null,"dir":"Reference","previous_headings":"","what":"Add NocoDB user account — add_user","title":"Add NocoDB user account — add_user","text":"Adds NocoDB user account NocoDB server without user interaction. E-mail invitation bypassed user's e-mail address automatically validated. convenience function combines several functions found package.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/add_user.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add NocoDB user account — add_user","text":"","code":"add_user(   user_email,   user_password,   display_name = NULL,   subscribe_to_newsletter = FALSE,   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg, require = TRUE),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg, require = TRUE),   quiet = TRUE )"},{"path":"https://nocodb.rpkg.dev/dev/reference/add_user.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add NocoDB user account — add_user","text":"user_email E-mail address user sign . character scalar. user_password Password user sign . character scalar. display_name Name displayed user NocoDB. subscribe_to_newsletter Whether subscribe signed user NocoDB newsletter. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . quiet Whether suppress printing status output internal processing.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/add_user.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add NocoDB user account — add_user","text":"tibble metadata updated NocoDB user, invisibly.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/add_user.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add NocoDB user account — add_user","text":"add_user() support authentication via API tokens update_app_settings().","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/api.html","id":null,"dir":"Reference","previous_headings":"","what":"Call NocoDB API — api","title":"Call NocoDB API — api","text":"Performs API call NocoDB server returns response list type JSON, otherwise character scalar.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/api.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call NocoDB API — api","text":"","code":"api(   path,   method = c(\"GET\", \"CONNECT\", \"DELETE\", \"HEAD\", \"OPTIONS\", \"PATCH\", \"POST\", \"PUT\",     \"TRACE\"),   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg),   auth = TRUE,   url_params = NULL,   body_json = NULL,   auto_unbox = TRUE,   simplify = TRUE,   flatten = TRUE,   max_tries = 3L,   verbosity = NULL )"},{"path":"https://nocodb.rpkg.dev/dev/reference/api.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call NocoDB API — api","text":"path Optionally, path save body response. useful large responses since avoids storing response memory. method HTTP request method. One \"GET\", \"CONNECT\", \"DELETE\", \"HEAD\", \"OPTIONS\", \"PATCH\", \"POST\", \"PUT\" \"TRACE\". hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided. auth Whether include authentication header HTTP request. url_params URL parameters added query string. Either NULL omit named list key-value pairs define query parameters. Values must scalars, opt escaping, wrap strings (). body_json Data include JSON HTTP request body. Either list NULL empty body. auto_unbox Whether automatically \"unbox\" length-1 vectors body_json JSON scalars. simplify Whether automatically simplify JSON structures returned JSON. Enables/disables simplify* arguments jsonlite::fromJSON(). flatten Whether automatically flatten nested data frames returned JSON single non-nested data frame. max_tries Maximum number attempts retry case HTTP error. integerish scalar. verbosity much information print? wrapper around req_verbose() uses integer control verbosity: 0: output 1: show headers 2: show headers bodies 3: show headers, bodies, curl status messages. Use with_verbosity() control verbosity requests affect directly.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/api.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call NocoDB API — api","text":"NULL API response's body empty. API response's body list type JSON. API response's body character scalar cases.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/api.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Call NocoDB API — api","text":"See req_auth() details authentication logic enabled via auth. full control performed HTTP request, resort lower-level req_basic().","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/api_tokens.html","id":null,"dir":"Reference","previous_headings":"","what":"List NocoDB API tokens — api_tokens","title":"List NocoDB API tokens — api_tokens","text":"Returns tibble metadata API tokens authenticating user access NocoDB server GET /api/v1/tokens API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/api_tokens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List NocoDB API tokens — api_tokens","text":"","code":"api_tokens(   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg, require = TRUE),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg, require = TRUE) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/api_tokens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List NocoDB API tokens — api_tokens","text":"hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate .","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/api_tokens.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List NocoDB API tokens — api_tokens","text":"tibble.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/api_tokens.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List NocoDB API tokens — api_tokens","text":"API endpoint support authentication via API tokens.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/app_settings.html","id":null,"dir":"Reference","previous_headings":"","what":"List NocoDB app settings — app_settings","title":"List NocoDB app settings — app_settings","text":"Returns tibble (meta)data application settings NocoDB server via GET /api/v2/meta/nocodb/info API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/app_settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List NocoDB app settings — app_settings","text":"","code":"app_settings(   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/app_settings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List NocoDB app settings — app_settings","text":"hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/app_settings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List NocoDB app settings — app_settings","text":"application settings specified NocoDB server tibble.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/assemble_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Assemble NocoDB URL — assemble_url","title":"Assemble NocoDB URL — assemble_url","text":"Assemble NocoDB URL","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/assemble_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assemble NocoDB URL — assemble_url","text":"","code":"assemble_url(   ...,   .scheme = \"https\",   .hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/assemble_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assemble NocoDB URL — assemble_url","text":"... Optional path components added base URL. .scheme Scheme use assembled URL. character scalar. .hostname Hostname use assembled URL. character scalar.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/assemble_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assemble NocoDB URL — assemble_url","text":"character scalar.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/assemble_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assemble NocoDB URL — assemble_url","text":"","code":"if (FALSE) { # \\dontrun{ nocodb:::assemble_url(\"api/v2/meta/bases/\")} # }"},{"path":"https://nocodb.rpkg.dev/dev/reference/assert_super_admin.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert super admin — assert_super_admin","title":"Assert super admin — assert_super_admin","text":"Asserts provided credentials belong NocoDB's super admin user.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/assert_super_admin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert super admin — assert_super_admin","text":"","code":"assert_super_admin(   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = NULL )"},{"path":"https://nocodb.rpkg.dev/dev/reference/assert_super_admin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert super admin — assert_super_admin","text":"hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/assert_super_admin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert super admin — assert_super_admin","text":"TRUE, invisibly.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/assert_super_admin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assert super admin — assert_super_admin","text":"user determined based api_token email password (former takes precedence).","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/base.html","id":null,"dir":"Reference","previous_headings":"","what":"Get NocoDB base — base","title":"Get NocoDB base — base","text":"Returns tibble metadata specified base NocoDB server GET /api/v2/meta/bases/{id_base} API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/base.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get NocoDB base — base","text":"","code":"base(   id_base = base_id(hostname = hostname, email = email, password = password, api_token =     api_token),   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/base.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get NocoDB base — base","text":"id_base NocoDB base identifier returned base_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/base.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get NocoDB base — base","text":"tibble metadata specified NocoDB base.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/base_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Get NocoDB base ID — base_id","title":"Get NocoDB base ID — base_id","text":"Returns identifier base specified title NocoDB server.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/base_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get NocoDB base ID — base_id","text":"","code":"base_id(   title = pal::pkg_config_val(key = \"base_title\", pkg = this_pkg),   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/base_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get NocoDB base ID — base_id","text":"title NocoDB base title. character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/base_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get NocoDB base ID — base_id","text":"Base identifier character scalar.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/base_ui_acl.html","id":null,"dir":"Reference","previous_headings":"","what":"List NocoDB base visibility rules — base_ui_acl","title":"List NocoDB base visibility rules — base_ui_acl","text":"Returns tibble metadata visibility rules (UI ACL) different views specified base NocoDB server GET /api/v2/meta/bases/{id_base}/visibility-rules API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/base_ui_acl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List NocoDB base visibility rules — base_ui_acl","text":"","code":"base_ui_acl(   id_base = base_id(hostname = hostname, email = email, password = password, api_token =     api_token),   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/base_ui_acl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List NocoDB base visibility rules — base_ui_acl","text":"id_base NocoDB base identifier returned base_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/base_ui_acl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List NocoDB base visibility rules — base_ui_acl","text":"tibble.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/base_users.html","id":null,"dir":"Reference","previous_headings":"","what":"List NocoDB base users — base_users","title":"List NocoDB base users — base_users","text":"Returns tibble metadata users regard specified base NocoDB server GET /api/v2/meta/bases/{id_base}/users API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/base_users.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List NocoDB base users — base_users","text":"","code":"base_users(   id_base = base_id(hostname = hostname, email = email, password = password, api_token =     api_token),   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/base_users.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List NocoDB base users — base_users","text":"id_base NocoDB base identifier returned base_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/base_users.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List NocoDB base users — base_users","text":"tibble.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/bases.html","id":null,"dir":"Reference","previous_headings":"","what":"List NocoDB bases — bases","title":"List NocoDB bases — bases","text":"Returns tibble metadata bases NocoDB server GET /api/v2/meta/bases API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/bases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List NocoDB bases — bases","text":"","code":"bases(   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/bases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List NocoDB bases — bases","text":"hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/bases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List NocoDB bases — bases","text":"tibble.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/create_api_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Create NocoDB API token — create_api_token","title":"Create NocoDB API token — create_api_token","text":"Adds new API token specified user NocoDB server via POST /api/v1/tokens API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/create_api_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create NocoDB API token — create_api_token","text":"","code":"create_api_token(   description,   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg, require = TRUE),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg, require = TRUE) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/create_api_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create NocoDB API token — create_api_token","text":"description Description assign newly created API token (displayed Token name NocoDB's UI). hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate .","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/create_api_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create NocoDB API token — create_api_token","text":"tibble (meta)data newly created API token.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/create_api_token.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create NocoDB API token — create_api_token","text":"API endpoint support authentication via API tokens.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/create_base.html","id":null,"dir":"Reference","previous_headings":"","what":"Create NocoDB base — create_base","title":"Create NocoDB base — create_base","text":"Adds new base NocoDB server via POST /api/v2/meta/bases API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/create_base.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create NocoDB base — create_base","text":"","code":"create_base(   title = pal::pkg_config_val(key = \"base_title\", pkg = this_pkg),   description = NULL,   color = \"#36BFFF\",   show_null_and_empty_in_filter = TRUE,   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/create_base.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create NocoDB base — create_base","text":"title Base title. character scalar. description Base description. character scalar. color Color use base icon. hexadecimal color code like \"#36BFFF\". show_null_and_empty_in_filter Whether distinguish NULLs empty values column filters. FALSE, NULL empty fields treated alike. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/create_base.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create NocoDB base — create_base","text":"tibble metadata newly created NocoDB base, invisibly.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/create_data_src.html","id":null,"dir":"Reference","previous_headings":"","what":"Create NocoDB data source — create_data_src","title":"Create NocoDB data source — create_data_src","text":"Adds data source specified base NocoDB server via POST /api/v2/meta/bases/{id_base}/sources API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/create_data_src.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create NocoDB data source — create_data_src","text":"","code":"create_data_src(   connection,   type = c(\"mssql\", \"mysql\", \"pg\", \"sqlite3\"),   alias = NULL,   inflection_column = c(\"none\", \"camelize\"),   inflection_table = c(\"none\", \"camelize\"),   is_schema_readonly = FALSE,   is_data_readonly = FALSE,   enabled = TRUE,   id_base = base_id(hostname = hostname, email = email, password = password, api_token =     api_token),   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/create_data_src.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create NocoDB data source — create_data_src","text":"connection Type-specific connection details data source. list. type Type data source. One \"mssql\", \"mysql\", \"pg\" \"sqlite3\". alias Alias data source. character scalar. inflection_column Type inflection apply column names data source. One \"none\" \"camelize\". inflection_table Type inflection apply table names data source. One \"none\" \"camelize\". is_schema_readonly Whether forbid alterations data source's schema NocoDB. is_data_readonly Whether forbid alterations data source's data NocoDB. enabled Whether added data source enabled disabled. id_base NocoDB base identifier returned base_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/create_data_src.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create NocoDB data source — create_data_src","text":"alias, invisibly.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/create_data_src.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create NocoDB data source — create_data_src","text":"","code":"if (FALSE) { # \\dontrun{ nocodb::create_data_src(type = \"pg\",                         connection = list(sslmode = \"verify-full\",                                           user = \"REPLACE-ME\",                                           password = \"REPLACE-ME\",                                           database = REPLACE-ME,                                           host = \"REPLACE-ME\",                                           port = 5432,                                           ssl = list(ca = \"\",                                                      cert = \"\",                                                      key = \"\")),                         alias = \"REPLACE-ME\",                         inflection_column = \"none\",                         inflection_table = \"none\")} # }"},{"path":"https://nocodb.rpkg.dev/dev/reference/create_data_src_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Create table in NocoDB data source — create_data_src_tbl","title":"Create table in NocoDB data source — create_data_src_tbl","text":"Adds new table specified data source specified base NocoDB server via POST /api/v2/meta/bases/{id_base}/{id_data_src}/tables API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/create_data_src_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create table in NocoDB data source — create_data_src_tbl","text":"","code":"create_data_src_tbl(   id_data_src,   name,   cols,   title = NULL,   meta = NULL,   order = NULL,   id_base = base_id(hostname = hostname, email = email, password = password, api_token =     api_token),   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/create_data_src_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create table in NocoDB data source — create_data_src_tbl","text":"id_data_src NocoDB data source identifier returned data_src_id(). character scalar. name Table name. character scalar. cols Table columns specification list something coercible like data frame. title NocoDB-specific table title. character scalar. meta NocoDB-specific table metadata. list. order number assign table's NocoDB-specific order \"weight\". id_base NocoDB base identifier returned base_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/create_data_src_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create table in NocoDB data source — create_data_src_tbl","text":"tibble metadata newly created NocoDB table, invisibly.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/create_data_src_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create table in NocoDB data source — create_data_src_tbl","text":"","code":"if (FALSE) { # \\dontrun{ # create new table with a single PK column nocodb::create_data_src_tbl(id_data_src = \"REPLACE-ME\",                             name = \"my_new_table\",                             title = \"MyNewTable\",                             cols = list(list(column_name = \"id\",                                              title = \"id\",                                              dt = \"text\",                                              dtx = \"text\",                                              nrqd = FALSE,                                              rqd = TRUE,                                              ck = FALSE,                                              pk = TRUE,                                              un = FALSE,                                              ai = FALSE,                                              uidt = \"LongText\")))} # }"},{"path":"https://nocodb.rpkg.dev/dev/reference/create_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Create NocoDB table — create_tbl","title":"Create NocoDB table — create_tbl","text":"Adds new table specified base's default data source NocoDB server via POST /api/v2/meta/bases/{id_base}/tables API endpoint. add new table specific (external) data source, use create_data_src_tbl() instead.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/create_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create NocoDB table — create_tbl","text":"","code":"create_tbl(   name,   cols,   title = NULL,   meta = NULL,   order = NULL,   id_base = base_id(hostname = hostname, email = email, password = password, api_token =     api_token),   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/create_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create NocoDB table — create_tbl","text":"name Table name. character scalar. cols Table columns specification list something coercible like data frame. title NocoDB-specific table title. character scalar. meta NocoDB-specific table metadata. list. order number assign table's NocoDB-specific order \"weight\". id_base NocoDB base identifier returned base_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/create_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create NocoDB table — create_tbl","text":"tibble metadata newly created NocoDB table, invisibly.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/create_tbl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create NocoDB table — create_tbl","text":"Besides specified cols, NocoDB automatically creates additional columns created_at, updated_at, created_by updated_by system fields.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/create_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create NocoDB table — create_tbl","text":"","code":"if (FALSE) { # \\dontrun{ # create new table with a single PK column nocodb::create_tbl(name = \"my_new_table\",                    title = \"MyNewTable\",                    cols = list(list(column_name = \"id\",                                     title = \"id\",                                     dt = \"text\",                                     dtx = \"text\",                                     nrqd = FALSE,                                     rqd = TRUE,                                     ck = FALSE,                                     pk = TRUE,                                     un = FALSE,                                     ai = FALSE,                                     uidt = \"LongText\")))} # }"},{"path":"https://nocodb.rpkg.dev/dev/reference/create_tbl_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Create NocoDB table column — create_tbl_col","title":"Create NocoDB table column — create_tbl_col","text":"Creates specified table column NocoDB server via POST /api/v2/meta/tables/{id_tbl}/columns API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/create_tbl_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create NocoDB table column — create_tbl_col","text":"","code":"create_tbl_col(   id_tbl,   column_name,   title = column_name,   uidt = NULL,   dt = NULL,   cdf = NULL,   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/create_tbl_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create NocoDB table column — create_tbl_col","text":"id_tbl NocoDB table identifier returned tbl_id(). character scalar. column_name Column name. character scalar. title NocoDB column title. character scalar. uidt NocoDB user interface data type. Either NULL omit one \"Attachment\" \"AutoNumber\" \"Barcode\" \"Button\" \"Checkbox\" \"Collaborator\" \"Count\" \"CreatedBy\" \"CreatedTime\" \"Currency\" \"Date\" \"DateTime\" \"Decimal\" \"Duration\" \"Email\" \"ForeignKey\" \"Formula\" \"GeoData\" \"Geometry\" \"ID\" \"JSON\" \"LastModifiedBy\" \"LastModifiedTime\" \"Links\" \"LinkToAnotherRecord\" \"LongText\" \"Lookup\" \"MultiSelect\" \"Number\" \"Percent\" \"PhoneNumber\" \"QrCode\" \"Rating\" \"Rollup\" \"SingleLineText\" \"SingleSelect\" \"SpecificDBType\" \"Time\" \"URL\" \"User\" \"Year\" . dt Column data type. Either NULL omit character scalar. cdf Column default value. Either NULL omit character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/create_tbl_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create NocoDB table column — create_tbl_col","text":"tibble metadata newly created NocoDB table column, invisibly.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/data_src.html","id":null,"dir":"Reference","previous_headings":"","what":"Get NocoDB data source — data_src","title":"Get NocoDB data source — data_src","text":"Returns tibble metadata specified data source specified base NocoDB server GET /api/v2/meta/bases/{id_base}/sources/{id_data_src} API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/data_src.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get NocoDB data source — data_src","text":"","code":"data_src(   id_data_src,   id_base = base_id(hostname = hostname, email = email, password = password, api_token =     api_token),   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/data_src.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get NocoDB data source — data_src","text":"id_data_src NocoDB data source identifier returned data_src_id(). character scalar. id_base NocoDB base identifier returned base_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/data_src.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get NocoDB data source — data_src","text":"tibble metadata specified NocoDB data source.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/data_src_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"List NocoDB data source schema changes — data_src_diff","title":"List NocoDB data source schema changes — data_src_diff","text":"Returns tibble listing detected differences specified data source's external NocoDB-internal state via GET /api/v2/meta/bases/{id_base}/meta-diff/{id_data_src} API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/data_src_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List NocoDB data source schema changes — data_src_diff","text":"","code":"data_src_diff(   id_data_src,   id_base = base_id(hostname = hostname, email = email, password = password, api_token =     api_token),   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/data_src_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List NocoDB data source schema changes — data_src_diff","text":"id_data_src NocoDB data source identifier returned data_src_id(). character scalar. id_base NocoDB base identifier returned base_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/data_src_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List NocoDB data source schema changes — data_src_diff","text":"tibble metadata detected schema changes NocoDB data source.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/data_src_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Get NocoDB data source ID — data_src_id","title":"Get NocoDB data source ID — data_src_id","text":"Returns identifier data source specified alias specified base NocoDB server.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/data_src_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get NocoDB data source ID — data_src_id","text":"","code":"data_src_id(   alias,   id_base = base_id(hostname = hostname, email = email, password = password, api_token =     api_token),   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/data_src_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get NocoDB data source ID — data_src_id","text":"alias Alias data source. character scalar. id_base NocoDB base identifier returned base_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/data_src_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get NocoDB data source ID — data_src_id","text":"Data source identifier character scalar.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/data_src_tbls.html","id":null,"dir":"Reference","previous_headings":"","what":"List tables in NocoDB data source — data_src_tbls","title":"List tables in NocoDB data source — data_src_tbls","text":"Returns tibble metadata tables specified data source specified base NocoDB server GET /api/v2/meta/bases/{id_base}/{id_data_src}/tables API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/data_src_tbls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List tables in NocoDB data source — data_src_tbls","text":"","code":"data_src_tbls(   id_data_src,   id_base = base_id(hostname = hostname, email = email, password = password, api_token =     api_token),   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/data_src_tbls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List tables in NocoDB data source — data_src_tbls","text":"id_data_src NocoDB data source identifier returned data_src_id(). character scalar. id_base NocoDB base identifier returned base_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/data_src_tbls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List tables in NocoDB data source — data_src_tbls","text":"tibble.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/data_srcs.html","id":null,"dir":"Reference","previous_headings":"","what":"List NocoDB data sources — data_srcs","title":"List NocoDB data sources — data_srcs","text":"Returns tibble metadata data sources specified base NocoDB server GET /api/v2/meta/bases/{id_base}/sources API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/data_srcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List NocoDB data sources — data_srcs","text":"","code":"data_srcs(   id_base = base_id(hostname = hostname, email = email, password = password, api_token =     api_token),   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/data_srcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List NocoDB data sources — data_srcs","text":"id_base NocoDB base identifier returned base_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/data_srcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List NocoDB data sources — data_srcs","text":"tibble.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/decode_access_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Decode access token (JWT) — decode_access_token","title":"Decode access token (JWT) — decode_access_token","text":"Decodes access token adheres JSON Web Token (JWT) standard returns payload tibble. JWT's cryptographic signature simply ignored.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/decode_access_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decode access token (JWT) — decode_access_token","text":"","code":"decode_access_token(x)"},{"path":"https://nocodb.rpkg.dev/dev/reference/decode_access_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decode access token (JWT) — decode_access_token","text":"x Access token decoded.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/decode_access_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decode access token (JWT) — decode_access_token","text":"decoded access token tibble. Column iat gives time JWT issued column exp gives expiration time JWT must accepted anymore. registered claim names JWT standard.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/decode_access_token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decode access token (JWT) — decode_access_token","text":"","code":"if (FALSE) { # \\dontrun{ nocodb:::access_token() |> nocodb:::decode_access_token()} # }"},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_api_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete NocoDB API token — delete_api_token","title":"Delete NocoDB API token — delete_api_token","text":"Deletes specified API token NocoDB server via DELETE /api/v1/tokens/{api_token} API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_api_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete NocoDB API token — delete_api_token","text":"","code":"delete_api_token(   api_token,   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg, require = TRUE),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg, require = TRUE) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_api_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete NocoDB API token — delete_api_token","text":"api_token NocoDB API token delete. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate .","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_api_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete NocoDB API token — delete_api_token","text":"api_token, invisibly.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_api_token.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delete NocoDB API token — delete_api_token","text":"API endpoint support authentication via API tokens.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_base.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete NocoDB base — delete_base","title":"Delete NocoDB base — delete_base","text":"Deletes specified base NocoDB server via DELETE /api/v2/meta/bases/{id_base} API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_base.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete NocoDB base — delete_base","text":"","code":"delete_base(   id_base,   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_base.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete NocoDB base — delete_base","text":"id_base NocoDB base identifier returned base_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_base.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete NocoDB base — delete_base","text":"id_base, invisibly.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_base_user.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete NocoDB base user — delete_base_user","title":"Delete NocoDB base user — delete_base_user","text":"Revokes privileges user regard specified base NocoDB server via DELETE /api/v2/meta/bases/{id_base}/users/{id_user} API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_base_user.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete NocoDB base user — delete_base_user","text":"","code":"delete_base_user(   id_user,   id_base = base_id(hostname = hostname, email = email, password = password, api_token =     api_token),   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg),   quiet = FALSE )"},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_base_user.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete NocoDB base user — delete_base_user","text":"id_user NocoDB user identifier returned user_id(). character scalar. id_base NocoDB base identifier returned base_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided. quiet Whether suppress printing status output internal processing.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_base_user.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete NocoDB base user — delete_base_user","text":"id_user, invisibly.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_base_user.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delete NocoDB base user — delete_base_user","text":"Despite endpoint name, user actually deleted instead revoked assigned role regard id_base, effect assigning \"-access\" role.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_data_src.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete NocoDB data source — delete_data_src","title":"Delete NocoDB data source — delete_data_src","text":"Deletes specified data source specified base NocoDB server via DELETE /api/v2/meta/bases/{id_base}/sources/{id_data_src} API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_data_src.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete NocoDB data source — delete_data_src","text":"","code":"delete_data_src(   id_data_src,   id_base = base_id(hostname = hostname, email = email, password = password, api_token =     api_token),   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_data_src.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete NocoDB data source — delete_data_src","text":"id_data_src NocoDB data source identifier returned data_src_id(). character scalar. id_base NocoDB base identifier returned base_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_data_src.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete NocoDB data source — delete_data_src","text":"id_data_src, invisibly.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete NocoDB table — delete_tbl","title":"Delete NocoDB table — delete_tbl","text":"Deletes specified table NocoDB server via DELETE /api/v2/meta/tables/{id_tbl} API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete NocoDB table — delete_tbl","text":"","code":"delete_tbl(   id_tbl,   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete NocoDB table — delete_tbl","text":"id_tbl NocoDB table identifier returned tbl_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete NocoDB table — delete_tbl","text":"id_tbl, invisibly.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_tbl_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete NocoDB table column — delete_tbl_col","title":"Delete NocoDB table column — delete_tbl_col","text":"Deletes specified table column NocoDB server via DELETE /api/v2/meta/columns/{id_col} API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_tbl_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete NocoDB table column — delete_tbl_col","text":"","code":"delete_tbl_col(   id_col,   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_tbl_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete NocoDB table column — delete_tbl_col","text":"id_col NocoDB column identifier returned tbl_col_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_tbl_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete NocoDB table column — delete_tbl_col","text":"id_col, invisibly.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_user.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete NocoDB user — delete_user","title":"Delete NocoDB user — delete_user","text":"Deletes specified user NocoDB server via DELETE /api/v1/users/{id_user} API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_user.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete NocoDB user — delete_user","text":"","code":"delete_user(   id_user,   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   quiet = FALSE )"},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_user.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete NocoDB user — delete_user","text":"id_user NocoDB user identifier returned user_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . quiet Whether suppress printing status output internal processing.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_user.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete NocoDB user — delete_user","text":"id_user, invisibly.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_user.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delete NocoDB user — delete_user","text":"API endpoint support authentication via API tokens.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/delete_user.html","id":"api-errors","dir":"Reference","previous_headings":"","what":"API errors","title":"Delete NocoDB user — delete_user","text":"encounter read properties undefined (reading 'roles') error, likely means specified id_user invalid (.e. exist). encounter userDelete -  : allowed error, means authenticating user sufficient privileges (must \"org-level-creator\").","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/has_data_src_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if NocoDB data source has schema changes pending — has_data_src_diff","title":"Test if NocoDB data source has schema changes pending — has_data_src_diff","text":"Tests whether data_src_diff() detects pending schema changes.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/has_data_src_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if NocoDB data source has schema changes pending — has_data_src_diff","text":"","code":"has_data_src_diff(   id_data_src,   id_base = base_id(hostname = hostname, email = email, password = password, api_token =     api_token),   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/has_data_src_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if NocoDB data source has schema changes pending — has_data_src_diff","text":"id_data_src NocoDB data source identifier returned data_src_id(). character scalar. id_base NocoDB base identifier returned base_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/has_data_src_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if NocoDB data source has schema changes pending — has_data_src_diff","text":"logical scalar.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/invite_base_user.html","id":null,"dir":"Reference","previous_headings":"","what":"Invite NocoDB base user — invite_base_user","title":"Invite NocoDB base user — invite_base_user","text":"Invites new user specified base NocoDB server via POST /api/v2/meta/bases/{id_base}/users API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/invite_base_user.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Invite NocoDB base user — invite_base_user","text":"","code":"invite_base_user(   user_email,   role = c(\"no-access\", \"viewer\", \"commenter\", \"editor\", \"creator\"),   id_base = base_id(hostname = hostname, email = email, password = password, api_token =     api_token),   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg),   quiet = FALSE )"},{"path":"https://nocodb.rpkg.dev/dev/reference/invite_base_user.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Invite NocoDB base user — invite_base_user","text":"user_email E-mail address user invite. character scalar. role Base role assign user. One \"-access\", \"viewer\", \"commenter\", \"editor\" \"creator\". id_base NocoDB base identifier returned base_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided. quiet Whether suppress printing status output internal processing.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/invite_base_user.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Invite NocoDB base user — invite_base_user","text":"user_email, invisibly.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/invite_base_user.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Invite NocoDB base user — invite_base_user","text":"Note invitation e-mail sent specified user yet exist NocoDB server.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/invite_user.html","id":null,"dir":"Reference","previous_headings":"","what":"Invite NocoDB user — invite_user","title":"Invite NocoDB user — invite_user","text":"Invites new user NocoDB server via POST /api/v1/users API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/invite_user.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Invite NocoDB user — invite_user","text":"","code":"invite_user(   user_email,   org_role = c(\"org-level-viewer\", \"org-level-creator\"),   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg, require = TRUE),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg, require = TRUE),   quiet = FALSE )"},{"path":"https://nocodb.rpkg.dev/dev/reference/invite_user.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Invite NocoDB user — invite_user","text":"user_email E-mail address user invite. character scalar. org_role Organisation-level role assign user. One \"org-level-viewer\" \"org-level-creator\". hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . quiet Whether suppress printing status output internal processing.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/invite_user.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Invite NocoDB user — invite_user","text":"NULL, invisibly.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/invite_user.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Invite NocoDB user — invite_user","text":"API endpoint support authentication via API tokens.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/is_access_token_expired.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if access token is expired — is_access_token_expired","title":"Test if access token is expired — is_access_token_expired","text":"Tests whether access token still valid .","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/is_access_token_expired.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if access token is expired — is_access_token_expired","text":"","code":"is_access_token_expired(x)"},{"path":"https://nocodb.rpkg.dev/dev/reference/is_access_token_expired.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if access token is expired — is_access_token_expired","text":"x Access token tested expiration.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/is_access_token_expired.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if access token is expired — is_access_token_expired","text":"logical scalar.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/is_plugin_active.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if plugin is active — is_plugin_active","title":"Test if plugin is active — is_plugin_active","text":"Tests whether plugin specified title active NocoDB server via GET /api/v1/db/meta/plugins/{title}/status API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/is_plugin_active.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if plugin is active — is_plugin_active","text":"","code":"is_plugin_active(   title,   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/is_plugin_active.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if plugin is active — is_plugin_active","text":"title NocoDB plugin title. character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/is_plugin_active.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if plugin is active — is_plugin_active","text":"logical scalar.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/is_plugin_active.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test if plugin is active — is_plugin_active","text":"Note API endpoint check plugin title validity simply returns FALSE title actually exist.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/is_signed_in.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if user is signed in — is_signed_in","title":"Test if user is signed in — is_signed_in","text":"Tests whether user specified email signed current R session. See sign_in() details.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/is_signed_in.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if user is signed in — is_signed_in","text":"","code":"is_signed_in(   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg, require = TRUE) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/is_signed_in.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if user is signed in — is_signed_in","text":"hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate .","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/is_signed_in.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if user is signed in — is_signed_in","text":"logical scalar.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/is_super_admin.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if user is super admin — is_super_admin","title":"Test if user is super admin — is_super_admin","text":"Determines whether provided credentials belong NocoDB's super admin user.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/is_super_admin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if user is super admin — is_super_admin","text":"","code":"is_super_admin(   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = NULL )"},{"path":"https://nocodb.rpkg.dev/dev/reference/is_super_admin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if user is super admin — is_super_admin","text":"hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/is_super_admin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if user is super admin — is_super_admin","text":"logical scalar.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/is_super_admin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test if user is super admin — is_super_admin","text":"user determined based api_token email password (former takes precedence).","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/nocodb-package.html","id":null,"dir":"Reference","previous_headings":"","what":"nocodb: Use NocoDB's RESTful APIs — nocodb-package","title":"nocodb: Use NocoDB's RESTful APIs — nocodb-package","text":"nocodb allows work NocoDB's RESTful APIs R. NocoDB (https://nocodb.com) web application provides intuitive spreadsheet-like front-end relational databases.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/nocodb-package.html","id":"package-configuration","dir":"Reference","previous_headings":"","what":"Package configuration","title":"nocodb: Use NocoDB's RESTful APIs — nocodb-package","text":"nocodb's functionality controlled via package-specific global configuration can either set via R options environment variables (former take precedence). configuration includes:","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/nocodb-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"nocodb: Use NocoDB's RESTful APIs — nocodb-package","text":"Maintainer: Salim Brüggemann salim-b@pm.(ORCID)","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/plugin.html","id":null,"dir":"Reference","previous_headings":"","what":"Get NocoDB plugin — plugin","title":"Get NocoDB plugin — plugin","text":"Returns tibble metadata specified plugin NocoDB server GET /api/v1/db/meta/plugins/{id_plugin} API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/plugin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get NocoDB plugin — plugin","text":"","code":"plugin(   id_plugin,   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/plugin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get NocoDB plugin — plugin","text":"id_plugin NocoDB plugin identifier returned plugin_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/plugin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get NocoDB plugin — plugin","text":"tibble metadata specified NocoDB plugin.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/plugin_category.html","id":null,"dir":"Reference","previous_headings":"","what":"Get NocoDB plugin category — plugin_category","title":"Get NocoDB plugin category — plugin_category","text":"Returns category specified plugin NocoDB server.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/plugin_category.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get NocoDB plugin category — plugin_category","text":"","code":"plugin_category(   id_plugin,   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/plugin_category.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get NocoDB plugin category — plugin_category","text":"id_plugin NocoDB plugin identifier returned plugin_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/plugin_category.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get NocoDB plugin category — plugin_category","text":"Plugin category character scalar.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/plugin_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Get NocoDB plugin ID — plugin_id","title":"Get NocoDB plugin ID — plugin_id","text":"Returns identifier plugin specified title NocoDB server.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/plugin_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get NocoDB plugin ID — plugin_id","text":"","code":"plugin_id(   title,   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/plugin_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get NocoDB plugin ID — plugin_id","text":"title NocoDB plugin title. character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/plugin_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get NocoDB plugin ID — plugin_id","text":"Plugin identifier character scalar.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/plugins.html","id":null,"dir":"Reference","previous_headings":"","what":"List NocoDB plugins — plugins","title":"List NocoDB plugins — plugins","text":"Returns tibble metadata available plugins NocoDB server via GET /api/v1/db/meta/plugins API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/plugins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List NocoDB plugins — plugins","text":"","code":"plugins(   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/plugins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List NocoDB plugins — plugins","text":"hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/plugins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List NocoDB plugins — plugins","text":"tibble.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/refresh_sign_in.html","id":null,"dir":"Reference","previous_headings":"","what":"Refresh NocoDB access token — refresh_sign_in","title":"Refresh NocoDB access token — refresh_sign_in","text":"Requests fresh NocoDB access token via POST /api/v1/auth/token/refresh API endpoint. Requires valid refresh token cached disk sign_in(cache_refresh_token = TRUE).","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/refresh_sign_in.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Refresh NocoDB access token — refresh_sign_in","text":"","code":"refresh_sign_in(   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg, require = TRUE) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/refresh_sign_in.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Refresh NocoDB access token — refresh_sign_in","text":"hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user whose access token refreshed. character scalar.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/refresh_sign_in.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Refresh NocoDB access token — refresh_sign_in","text":"freshly generated access token character scalar, invisibly.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/refresh_sign_in.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Refresh NocoDB access token — refresh_sign_in","text":"Besides generating fresh access token, also new refresh token cached disk.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/reorder_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-order NocoDB table — reorder_tbl","title":"Re-order NocoDB table — reorder_tbl","text":"Sets numeric order specified table NocoDB server via POST /api/v2/meta/tables/{id_tbl}/reorder API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/reorder_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Re-order NocoDB table — reorder_tbl","text":"","code":"reorder_tbl(   id_tbl,   order = 1L,   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/reorder_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Re-order NocoDB table — reorder_tbl","text":"id_tbl NocoDB table identifier returned tbl_id(). character scalar. order number assign table's NocoDB-specific order \"weight\". hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/reorder_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Re-order NocoDB table — reorder_tbl","text":"id_tbl, invisibly.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/reorder_tbl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Re-order NocoDB table — reorder_tbl","text":"Lower numbers place table higher UI vice versa. current order tables base can determined via tbls().","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/req_auth.html","id":null,"dir":"Reference","previous_headings":"","what":"Authenticate NocoDB HTTP request — req_auth","title":"Authenticate NocoDB HTTP request — req_auth","text":"Adds authentication header HTTP request intended call NocoDB API endpoint. following credential sources consulted descending order first one applicable used: api_token provided, directly added request xc-token header. email provided, corresponding user signed current R session generated access token yet expired, re-used. email provided, corresponding user signed past R session hence cached refresh token available yet expired, used generate fresh access token. email password provided, used newly sign_in() corresponding user. Access tokens (sources 2–4 ) added request xc-auth header. api_token, expire certain amount time, configured NocoDB server via NC_JWT_EXPIRES_IN (defaults 10 hours).","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/req_auth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Authenticate NocoDB HTTP request — req_auth","text":"","code":"req_auth(   req,   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/req_auth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authenticate NocoDB HTTP request — req_auth","text":"req request. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/req_auth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Authenticate NocoDB HTTP request — req_auth","text":"modified HTTP request.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/req_auth.html","id":"invalid-token-errors","dir":"Reference","previous_headings":"","what":"Invalid token errors","title":"Authenticate NocoDB HTTP request — req_auth","text":"provide api_token encounter Invalid token error, simply means api_token invalid (e.g. revoked). provide api_token encounter Invalid token error, means access token generated last call sign_in() current R session expired revoked meanwhile. happen rare edge cases since expired access tokens re-used req_auth(). encounter Invalid refresh token error, means refresh token cached disk last call sign_in() past R session expired meanwhile. happen rare edge cases since expired refresh tokens re-used req_auth(). latter two errors resolve manually invoking sign_in(). like avoid token expiration errors altogether, consider using API token (api_token) instead email password.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/req_basic.html","id":null,"dir":"Reference","previous_headings":"","what":"Create basic NocoDB API request — req_basic","title":"Create basic NocoDB API request — req_basic","text":"Assembles HTTP request structure common NocoDB API requests performed package.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/req_basic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create basic NocoDB API request — req_basic","text":"","code":"req_basic(   path,   method = c(\"GET\", \"CONNECT\", \"DELETE\", \"HEAD\", \"OPTIONS\", \"PATCH\", \"POST\", \"PUT\",     \"TRACE\"),   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   max_tries = 3L )"},{"path":"https://nocodb.rpkg.dev/dev/reference/req_basic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create basic NocoDB API request — req_basic","text":"path NocoDB API endpoint path. character scalar. method HTTP request method. One \"GET\", \"CONNECT\", \"DELETE\", \"HEAD\", \"OPTIONS\", \"PATCH\", \"POST\", \"PUT\" \"TRACE\". hostname NocoDB server hostname. character scalar. max_tries Maximum number attempts retry case HTTP error. integerish scalar.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/req_basic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create basic NocoDB API request — req_basic","text":"modified HTTP request.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/resend_base_user_invitation.html","id":null,"dir":"Reference","previous_headings":"","what":"Resend NocoDB base user invitation — resend_base_user_invitation","title":"Resend NocoDB base user invitation — resend_base_user_invitation","text":"Resends invitation e-mail message specified user regard specified base NocoDB server via POST /api/v2/meta/bases/{id_base}/users/{id_user/resend-invite} API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/resend_base_user_invitation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resend NocoDB base user invitation — resend_base_user_invitation","text":"","code":"resend_base_user_invitation(   id_user,   id_base = base_id(hostname = hostname, email = email, password = password, api_token =     api_token),   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg),   quiet = FALSE )"},{"path":"https://nocodb.rpkg.dev/dev/reference/resend_base_user_invitation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resend NocoDB base user invitation — resend_base_user_invitation","text":"id_user NocoDB user identifier returned user_id(). character scalar. id_base NocoDB base identifier returned base_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided. quiet Whether suppress printing status output internal processing.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/resend_base_user_invitation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resend NocoDB base user invitation — resend_base_user_invitation","text":"id_user, invisibly.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/set_display_val.html","id":null,"dir":"Reference","previous_headings":"","what":"Set display value column for NocoDB table — set_display_val","title":"Set display value column for NocoDB table — set_display_val","text":"Sets specified column corresponding table's display value NocoDB server via POST /api/v2/meta/columns/{id_col}/primary API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/set_display_val.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set display value column for NocoDB table — set_display_val","text":"","code":"set_display_val(   id_col,   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/set_display_val.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set display value column for NocoDB table — set_display_val","text":"id_col NocoDB column identifier returned tbl_col_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/set_display_val.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set display value column for NocoDB table — set_display_val","text":"TRUE, invisibly.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/set_display_vals.html","id":null,"dir":"Reference","previous_headings":"","what":"Set display value columns for multiple NocoDB tables — set_display_vals","title":"Set display value columns for multiple NocoDB tables — set_display_vals","text":"Sets respective column display value tables data. convenience function combines several functions found package.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/set_display_vals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set display value columns for multiple NocoDB tables — set_display_vals","text":"","code":"set_display_vals(   data,   id_base = base_id(hostname = hostname, email = email, password = password, api_token =     api_token),   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg),   quiet = FALSE )"},{"path":"https://nocodb.rpkg.dev/dev/reference/set_display_vals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set display value columns for multiple NocoDB tables — set_display_vals","text":"data Dataframe two columns name display_col defines table-name--display-value-column mapping applied. Additional columns ignored. id_base NocoDB base identifier returned base_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided. quiet Whether suppress printing status output internal processing.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/set_display_vals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set display value columns for multiple NocoDB tables — set_display_vals","text":"NULL, invisibly.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/set_tbl_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Set metadata for NocoDB tables — set_tbl_metadata","title":"Set metadata for NocoDB tables — set_tbl_metadata","text":"Sets provided table metadata NocoDB server. Currently, includes: Setting order tables base using reorder_tbl() according row order data. Setting table icons (emojis) using update_tbl() according data$meta.icon.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/set_tbl_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set metadata for NocoDB tables — set_tbl_metadata","text":"","code":"set_tbl_metadata(   data,   id_base = base_id(hostname = hostname, email = email, password = password, api_token =     api_token),   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg),   quiet = FALSE )"},{"path":"https://nocodb.rpkg.dev/dev/reference/set_tbl_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set metadata for NocoDB tables — set_tbl_metadata","text":"data Data frame columns name, meta.icon defines table-name--metadata-value mapping applied. Additional columns ignored. id_base NocoDB base identifier returned base_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided. quiet Whether suppress printing status output internal processing.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/set_tbl_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set metadata for NocoDB tables — set_tbl_metadata","text":"NULL, invisibly.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/sign_in.html","id":null,"dir":"Reference","previous_headings":"","what":"Sign in NocoDB user — sign_in","title":"Sign in NocoDB user — sign_in","text":"Authenticates NocoDB user email password via POST /api/v1/auth/user/signin API endpoint. access token (JWT) generated process stored package environment used subsequent API calls.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/sign_in.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sign in NocoDB user — sign_in","text":"","code":"sign_in(   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg, require = TRUE),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg, require = TRUE),   cache_refresh_token = TRUE )"},{"path":"https://nocodb.rpkg.dev/dev/reference/sign_in.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sign in NocoDB user — sign_in","text":"hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . cache_refresh_token Whether write refresh token included API response disk (OS user cache directory). allows refresh expired access token using refresh_sign_in().","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/sign_in.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sign in NocoDB user — sign_in","text":"generated access token character scalar, invisibly.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/sign_in.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sign in NocoDB user — sign_in","text":"generated access token expires certain amount time, configured NocoDB server via NC_JWT_EXPIRES_IN (defaults 10 hours). allow frictionless user experience, separate refresh token cached disk cookie file (unless cache_refresh_token = FALSE). refresh_sign_in() can used generate new access token necessary. Taken together, allows users sign remain authenticated across R session restarts without provide password (unless refresh token expired invalidated sign_out() meantime). req_auth() implements functionality.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/sign_out.html","id":null,"dir":"Reference","previous_headings":"","what":"Sign out NocoDB user — sign_out","title":"Sign out NocoDB user — sign_out","text":"Invalidates cached refresh token via POST /api/v1/auth/user/signout API endpoint clears associated cache disk.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/sign_out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sign out NocoDB user — sign_out","text":"","code":"sign_out(   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg, require = TRUE),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg),   quiet = FALSE )"},{"path":"https://nocodb.rpkg.dev/dev/reference/sign_out.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sign out NocoDB user — sign_out","text":"hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user sign . character scalar. password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided. quiet Whether suppress printing status output internal processing.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/sign_out.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sign out NocoDB user — sign_out","text":"email, invisibly.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/sign_out.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sign out NocoDB user — sign_out","text":"Note email address sign api_token authenticate necessarily need belong user.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/sign_up_user.html","id":null,"dir":"Reference","previous_headings":"","what":"Sign up NocoDB user — sign_up_user","title":"Sign up NocoDB user — sign_up_user","text":"Signs specified user NocoDB server via POST /api/v1/auth/user/signup API endpoint. sign-restricted invitees , user must invited (via invite_user() invite_base_user()) invite_token must provided. Otherwise, user created straightaway (\"org-level-viewer\" role assigned).","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/sign_up_user.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sign up NocoDB user — sign_up_user","text":"","code":"sign_up_user(   user_email,   user_password,   invite_token = NULL,   subscribe_to_newsletter = FALSE,   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/sign_up_user.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sign up NocoDB user — sign_up_user","text":"user_email E-mail address user sign . character scalar. user_password Password user sign . character scalar. invite_token Invite token user sign . character scalar. subscribe_to_newsletter Whether subscribe signed user NocoDB newsletter. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/sign_up_user.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sign up NocoDB user — sign_up_user","text":"generated access token signed user character scalar, invisibly.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/sign_up_user.html","id":"api-errors","dir":"Reference","previous_headings":"","what":"API errors","title":"Sign up NocoDB user — sign_up_user","text":"provide invite_token encounter allowed signup error, means provided user_email match invite_token. provide invite_token encounter allowed signup error, means sign-new users restricted invitees . encounter Invalid invite url error, means provided invite_token either invalid already used sign .","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/store_access_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Store NocoDB access token — store_access_token","title":"Store NocoDB access token — store_access_token","text":"Stores NocoDB user's access token stateful package environment.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/store_access_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store NocoDB access token — store_access_token","text":"","code":"store_access_token(   x,   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg, require = TRUE) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/store_access_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Store NocoDB access token — store_access_token","text":"x Access token stored. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate .","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/store_access_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Store NocoDB access token — store_access_token","text":"x, invisibly.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/sync_data_src.html","id":null,"dir":"Reference","previous_headings":"","what":"Synchronize NocoDB data source schema — sync_data_src","title":"Synchronize NocoDB data source schema — sync_data_src","text":"Synchronizes specified data source's schema external NocoDB-internal state via POST /api/v2/meta/bases/{id_base}/meta-diff/{id_data_src} API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/sync_data_src.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synchronize NocoDB data source schema — sync_data_src","text":"","code":"sync_data_src(   id_data_src,   id_base = base_id(hostname = hostname, email = email, password = password, api_token =     api_token),   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/sync_data_src.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synchronize NocoDB data source schema — sync_data_src","text":"id_data_src NocoDB data source identifier returned data_src_id(). character scalar. id_base NocoDB base identifier returned base_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/sync_data_src.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Synchronize NocoDB data source schema — sync_data_src","text":"id_data_src, invisibly.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/sync_data_src_eagerly.html","id":null,"dir":"Reference","previous_headings":"","what":"Synchronize NocoDB data source schema eagerly — sync_data_src_eagerly","title":"Synchronize NocoDB data source schema eagerly — sync_data_src_eagerly","text":"Synchronizes specified data source's schema external NocoDB-internal state repeatedly calling sync_data_src() has_data_src_diff() detect changes.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/sync_data_src_eagerly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synchronize NocoDB data source schema eagerly — sync_data_src_eagerly","text":"","code":"sync_data_src_eagerly(   id_data_src,   id_base = base_id(hostname = hostname, email = email, password = password, api_token =     api_token),   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg),   wait_max = 30L,   wait_resync = 7 )"},{"path":"https://nocodb.rpkg.dev/dev/reference/sync_data_src_eagerly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synchronize NocoDB data source schema eagerly — sync_data_src_eagerly","text":"id_data_src NocoDB data source identifier returned data_src_id(). character scalar. id_base NocoDB base identifier returned base_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided. wait_max Maximum time seconds wait schema synchronization finish. error thrown still schema changes pending timeout reached. integerish scalar. wait_resync Interval seconds repeat calling sync_data_src(). number >= 1 < wait_max.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/sync_data_src_eagerly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Synchronize NocoDB data source schema eagerly — sync_data_src_eagerly","text":"id_data_src, invisibly.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Get NocoDB table — tbl","title":"Get NocoDB table — tbl","text":"Returns tibble metadata specified table NocoDB server GET /api/v2/meta/tables/{id_tbl} API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get NocoDB table — tbl","text":"","code":"tbl(   id_tbl,   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get NocoDB table — tbl","text":"id_tbl NocoDB table identifier returned tbl_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get NocoDB table — tbl","text":"tibble.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/tbl_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Get NocoDB table column — tbl_col","title":"Get NocoDB table column — tbl_col","text":"Returns tibble metadata specified column NocoDB server GET /api/v2/meta/columns/{id_col} API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/tbl_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get NocoDB table column — tbl_col","text":"","code":"tbl_col(   id_col,   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/tbl_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get NocoDB table column — tbl_col","text":"id_col NocoDB column identifier returned tbl_col_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/tbl_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get NocoDB table column — tbl_col","text":"tibble.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/tbl_col_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Get NocoDB table column ID — tbl_col_id","title":"Get NocoDB table column ID — tbl_col_id","text":"Returns identifier column specified name title table specified id_tbl NocoDB server.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/tbl_col_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get NocoDB table column ID — tbl_col_id","text":"","code":"tbl_col_id(   id_tbl,   name = NULL,   title = NULL,   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/tbl_col_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get NocoDB table column ID — tbl_col_id","text":"id_tbl NocoDB table identifier returned tbl_id(). character scalar. name NocoDB column name. character scalar, NULL name. title NocoDB column title. character scalar, NULL title. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/tbl_col_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get NocoDB table column ID — tbl_col_id","text":"character scalar.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/tbl_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"List NocoDB table columns — tbl_cols","title":"List NocoDB table columns — tbl_cols","text":"Returns tibble metadata columns specified table NocoDB server GET /api/v2/meta/tables/{id_tbl} API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/tbl_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List NocoDB table columns — tbl_cols","text":"","code":"tbl_cols(   id_tbl,   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/tbl_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List NocoDB table columns — tbl_cols","text":"id_tbl NocoDB table identifier returned tbl_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/tbl_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List NocoDB table columns — tbl_cols","text":"tibble.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/tbl_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Get NocoDB table ID — tbl_id","title":"Get NocoDB table ID — tbl_id","text":"Returns identifier table specified name specified base NocoDB server.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/tbl_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get NocoDB table ID — tbl_id","text":"","code":"tbl_id(   name,   id_base = base_id(hostname = hostname, email = email, password = password, api_token =     api_token),   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/tbl_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get NocoDB table ID — tbl_id","text":"name NocoDB table name. character scalar. id_base NocoDB base identifier returned base_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/tbl_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get NocoDB table ID — tbl_id","text":"character scalar.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/tbl_view_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Get NocoDB table view ID — tbl_view_id","title":"Get NocoDB table view ID — tbl_view_id","text":"Returns identifier view specified type, name /title table specified id_tbl NocoDB server.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/tbl_view_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get NocoDB table view ID — tbl_view_id","text":"","code":"tbl_view_id(   id_tbl,   type = \"default\",   name = NULL,   title = NULL,   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/tbl_view_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get NocoDB table view ID — tbl_view_id","text":"id_tbl NocoDB table identifier returned tbl_id(). character scalar. type NocoDB view type. One \"default\", \"form\", \"gallery\", \"grid\", \"kanban\", \"map\", \"calendar\", NULL type. name NocoDB view name. character scalar, NULL name. title NocoDB view title. character scalar, NULL title. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/tbl_view_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get NocoDB table view ID — tbl_view_id","text":"character scalar.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/tbl_views.html","id":null,"dir":"Reference","previous_headings":"","what":"List NocoDB table views — tbl_views","title":"List NocoDB table views — tbl_views","text":"Returns tibble metadata views specified table NocoDB server GET /api/v2/meta/tables/{id_tbl}/views API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/tbl_views.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List NocoDB table views — tbl_views","text":"","code":"tbl_views(   id_tbl,   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/tbl_views.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List NocoDB table views — tbl_views","text":"id_tbl NocoDB table identifier returned tbl_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/tbl_views.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List NocoDB table views — tbl_views","text":"tibble metadata views specified NocoDB table.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/tbls.html","id":null,"dir":"Reference","previous_headings":"","what":"List NocoDB tables — tbls","title":"List NocoDB tables — tbls","text":"Returns tibble metadata tables specified base NocoDB server GET /api/v2/meta/bases/{id_base}/tables API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/tbls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List NocoDB tables — tbls","text":"","code":"tbls(   id_base = base_id(hostname = hostname, email = email, password = password, api_token =     api_token),   include_m2m = TRUE,   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/tbls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List NocoDB tables — tbls","text":"id_base NocoDB base identifier returned base_id(). character scalar. include_m2m Whether include many--many junction tables result. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/tbls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List NocoDB tables — tbls","text":"tibble.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/test_data_src.html","id":null,"dir":"Reference","previous_headings":"","what":"Test NocoDB data source — test_data_src","title":"Test NocoDB data source — test_data_src","text":"Tests data source's connection details via NocoDB server's POST /api/v2/meta/connection/test API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/test_data_src.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test NocoDB data source — test_data_src","text":"","code":"test_data_src(   connection,   type = c(\"mssql\", \"mysql\", \"pg\", \"sqlite3\"),   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg),   quiet = FALSE )"},{"path":"https://nocodb.rpkg.dev/dev/reference/test_data_src.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test NocoDB data source — test_data_src","text":"connection Type-specific connection details data source. list. type Type data source. One \"mssql\", \"mysql\", \"pg\" \"sqlite3\". hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided. quiet Whether suppress printing status output internal processing.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/test_data_src.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test NocoDB data source — test_data_src","text":"logical scalar indicating whether connection test successful .","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/test_data_src.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test NocoDB data source — test_data_src","text":"Note PostgreSQL connection parameters sslmode database effect, .e. simply ignored API endpoint.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/test_data_src.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test NocoDB data source — test_data_src","text":"","code":"if (FALSE) { # \\dontrun{ nocodb::test_data_src(type = \"pg\",                       connection = list(sslmode = \"verify-full\",                                         user = \"REPLACE-ME\",                                         password = \"REPLACE-ME\",                                         host = \"REPLACE-ME\",                                         port = 5432L,                                         ssl = list()))} # }"},{"path":"https://nocodb.rpkg.dev/dev/reference/test_plugin.html","id":null,"dir":"Reference","previous_headings":"","what":"Test NocoDB plugin configuration — test_plugin","title":"Test NocoDB plugin configuration — test_plugin","text":"Tests configuration plugin specified title category NocoDB server via POST /api/v1/db/meta/plugins/test API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/test_plugin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test NocoDB plugin configuration — test_plugin","text":"","code":"test_plugin(   title,   config,   category = plugin_category(id_plugin = plugin_id(title = title, hostname = hostname,     email = email, password = password, api_token = api_token), hostname = hostname,     email = email, password = password, api_token = api_token),   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/test_plugin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test NocoDB plugin configuration — test_plugin","text":"title NocoDB plugin title. character scalar. config Plugin configuration. list. category NocoDB plugin category returned plugin_category(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/test_plugin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test NocoDB plugin configuration — test_plugin","text":"TRUE test successful.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/test_plugin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test NocoDB plugin configuration — test_plugin","text":"","code":"if (FALSE) { # \\dontrun{ nocodb::test_plugin(title = \"Backblaze B2\",                     config = list(bucket = \"REPLACE-ME\",                                   region = \"REPLACE-ME\",                                   access_key = \"REPLACE-ME\",                                   access_secret = \"REPLACE-ME\"))  nocodb::test_plugin(title = \"S3\",                     config = list(endpoint = \"https://s3.REPLACE-ME.backblazeb2.com\",                                   region = \"REPLACE-ME\",                                   bucket = \"REPLACE-ME\",                                   access_key = \"REPLACE-ME\",                                   access_secret = \"REPLACE-ME\",                                   acl = \"public-read\"))} # }"},{"path":"https://nocodb.rpkg.dev/dev/reference/update_app_settings.html","id":null,"dir":"Reference","previous_headings":"","what":"Update NocoDB app settings — update_app_settings","title":"Update NocoDB app settings — update_app_settings","text":"Updates application settings NocoDB server via POST /api/v1/app-settings API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/update_app_settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update NocoDB app settings — update_app_settings","text":"","code":"update_app_settings(   invite_only_signup = NULL,   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg, require = TRUE),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg, require = TRUE),   quiet = FALSE )"},{"path":"https://nocodb.rpkg.dev/dev/reference/update_app_settings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update NocoDB app settings — update_app_settings","text":"invite_only_signup Whether restrict sign-new NocoDB users invitees . hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . quiet Whether suppress printing status output internal processing.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/update_app_settings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update NocoDB app settings — update_app_settings","text":"NULL, invisibly.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/update_app_settings.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update NocoDB app settings — update_app_settings","text":"API endpoint support authentication via API tokens. super admin user allowed use API endpoint, .e. provided credentials must belong .","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/update_base.html","id":null,"dir":"Reference","previous_headings":"","what":"Update NocoDB base — update_base","title":"Update NocoDB base — update_base","text":"Updates specified base NocoDB server via PATCH /api/v2/meta/bases/{id_base} API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/update_base.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update NocoDB base — update_base","text":"","code":"update_base(   title = NULL,   description = NULL,   color = NULL,   show_null_and_empty_in_filter = NULL,   id_base = base_id(hostname = hostname, email = email, password = password, api_token =     api_token),   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/update_base.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update NocoDB base — update_base","text":"title New base title. character scalar. description Base description. character scalar. color Color use base icon. hexadecimal color code like \"#36BFFF\". show_null_and_empty_in_filter Whether distinguish NULLs empty values column filters. FALSE, NULL empty fields treated alike. id_base NocoDB base identifier returned base_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/update_base.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update NocoDB base — update_base","text":"id_base, invisibly.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/update_base_ui_acl.html","id":null,"dir":"Reference","previous_headings":"","what":"Update NocoDB base visibility rules — update_base_ui_acl","title":"Update NocoDB base visibility rules — update_base_ui_acl","text":"Updates visibility rules (UI ACL) different views specified table view NocoDB server via POST /api/v2/meta/bases/{id_base}/visibility-rules API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/update_base_ui_acl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update NocoDB base visibility rules — update_base_ui_acl","text":"","code":"update_base_ui_acl(   id_tbl_view,   guest = viewer,   viewer = commenter,   commenter = editor,   editor = creator,   creator = owner,   owner = FALSE,   id_base = base_id(hostname = hostname, email = email, password = password, api_token =     api_token),   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg),   quiet = FALSE )"},{"path":"https://nocodb.rpkg.dev/dev/reference/update_base_ui_acl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update NocoDB base visibility rules — update_base_ui_acl","text":"id_tbl_view Table view identifier returned tbl_view_id(). guest Whether hide table view users role guest. viewer Whether hide table view users role viewer. commenter Whether hide table view users role commenter. editor Whether hide table view users role editor. creator Whether hide table view users role creator. owner Whether hide table view users role owner. id_base NocoDB base identifier returned base_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided. quiet Whether suppress printing status output internal processing.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/update_base_ui_acl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update NocoDB base visibility rules — update_base_ui_acl","text":"id_tbl_view, invisibly.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/update_base_user.html","id":null,"dir":"Reference","previous_headings":"","what":"Update NocoDB base user — update_base_user","title":"Update NocoDB base user — update_base_user","text":"Updates specified user regard specified base NocoDB server via PATCH /api/v2/meta/bases/{id_base}/users/{id_user} PATCH /api/v1/db/meta/projects/{id_base}/users/{id_user} API endpoint, depending api_version.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/update_base_user.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update NocoDB base user — update_base_user","text":"","code":"update_base_user(   user_email,   role = c(\"no-access\", \"viewer\", \"commenter\", \"editor\", \"creator\"),   id_user = user_id(user_email = user_email, id_base = id_base, hostname = hostname,     email = email, password = password, api_token = api_token),   id_base = base_id(hostname = hostname, email = email, password = password, api_token =     api_token),   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg),   api_version = c(\"v2\", \"v1\"),   quiet = FALSE )"},{"path":"https://nocodb.rpkg.dev/dev/reference/update_base_user.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update NocoDB base user — update_base_user","text":"user_email E-mail address user. character scalar. role Base role assign user. One \"-access\", \"viewer\", \"commenter\", \"editor\" \"creator\". id_user NocoDB user identifier returned user_id(). character scalar. id_base NocoDB base identifier returned base_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided. api_version API endpoint version use. Either \"v2\" PATCH /api/v1/db/meta/projects/{id_base}/users/{id_user}, \"v1\" PATCH /api/v1/db/meta/projects/{id_base}/users/{id_user}. quiet Whether suppress printing status output internal processing.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/update_base_user.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update NocoDB base user — update_base_user","text":"id_user, invisibly.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/update_base_user.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update NocoDB base user — update_base_user","text":"super admin user allowed use API endpoint, .e. provided credentials must belong . Note sake convenience, function automatically falls back invite_base_user() necessary (.e. specified user yet invited specified base).","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/update_data_src.html","id":null,"dir":"Reference","previous_headings":"","what":"Update NocoDB data source — update_data_src","title":"Update NocoDB data source — update_data_src","text":"Updates specified data source specified base NocoDB server via PATCH /api/v2/meta/bases/{id_base}/sources/{id_data_src} API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/update_data_src.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update NocoDB data source — update_data_src","text":"","code":"update_data_src(   id_data_src,   connection = NULL,   type = NULL,   alias = NULL,   inflection_column = NULL,   inflection_table = NULL,   is_schema_readonly = NULL,   is_data_readonly = NULL,   enabled = NULL,   id_base = base_id(hostname = hostname, email = email, password = password, api_token =     api_token),   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/update_data_src.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update NocoDB data source — update_data_src","text":"id_data_src NocoDB data source identifier returned data_src_id(). character scalar. connection Type-specific connection details data source. list. type Type data source. One \"mssql\", \"mysql\", \"pg\" \"sqlite3\". alias Alias data source. character scalar. inflection_column Type inflection apply column names data source. One \"none\" \"camelize\". inflection_table Type inflection apply table names data source. One \"none\" \"camelize\". is_schema_readonly Whether forbid alterations data source's schema NocoDB. is_data_readonly Whether forbid alterations data source's data NocoDB. enabled Whether added data source enabled disabled. id_base NocoDB base identifier returned base_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/update_data_src.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update NocoDB data source — update_data_src","text":"tibble metadata updated NocoDB data source, invisibly.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/update_plugin.html","id":null,"dir":"Reference","previous_headings":"","what":"Update NocoDB plugin configuration — update_plugin","title":"Update NocoDB plugin configuration — update_plugin","text":"Updates configuration specified plugin NocoDB server via PATCH /api/v1/db/meta/plugins/{id_plugin} API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/update_plugin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update NocoDB plugin configuration — update_plugin","text":"","code":"update_plugin(   id_plugin,   config = NULL,   activate = NULL,   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/update_plugin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update NocoDB plugin configuration — update_plugin","text":"id_plugin NocoDB plugin identifier returned plugin_id(). character scalar. config Plugin configuration. list NULL. NULL, plugin's configuration left untouched. activate Whether activate plugin. NULL, plugin's activation status left untouched. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/update_plugin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update NocoDB plugin configuration — update_plugin","text":"tibble metadata updated NocoDB plugin, invisibly.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/update_plugin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update NocoDB plugin configuration — update_plugin","text":"","code":"if (FALSE) { # \\dontrun{ nocodb::update_plugin(id_plugin = nocodb::plugin_id(title = \"Backblaze B2\"),                       config = list(region = \"REPLACE-ME\",                                     bucket = \"REPLACE-ME\",                                     access_key = \"REPLACE-ME\",                                     access_secret = \"REPLACE-ME\"),                       activate = TRUE)                        nocodb::update_plugin(id_plugin = nocodb::plugin_id(title = \"S3\"),                       config = list(endpoint = \"https://s3.REPLACE-ME.backblazeb2.com\",                                     region = \"REPLACE-ME\",                                     bucket = \"REPLACE-ME\",                                     access_key = \"REPLACE-ME\",                                     access_secret = \"REPLACE-ME\",                                     acl = \"public-read\"),                       activate = TRUE)} # }"},{"path":"https://nocodb.rpkg.dev/dev/reference/update_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Update NocoDB table — update_tbl","title":"Update NocoDB table — update_tbl","text":"Updates metadata specified table NocoDB server via PATCH /api/v2/meta/tables/{id_tbl} API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/update_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update NocoDB table — update_tbl","text":"","code":"update_tbl(   id_tbl,   id_base = NULL,   name = NULL,   title = NULL,   meta = NULL,   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg),   quiet = FALSE )"},{"path":"https://nocodb.rpkg.dev/dev/reference/update_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update NocoDB table — update_tbl","text":"id_tbl NocoDB table identifier returned tbl_id(). character scalar. id_base NocoDB base identifier returned base_id(). character scalar. name Table name. character scalar. title NocoDB-specific table title. character scalar. meta NocoDB-specific table metadata. list. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided. quiet Whether suppress printing status output internal processing.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/update_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update NocoDB table — update_tbl","text":"id_tbl, invisibly.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/update_tbl_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Update NocoDB table column — update_tbl_col","title":"Update NocoDB table column — update_tbl_col","text":"Updates metadata specified table column NocoDB server via PATCH /api/v2/meta/columns/{id_col} API endpoint. Beware API endpoint alters schema underlying table, might undesirable, especially table external data source.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/update_tbl_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update NocoDB table column — update_tbl_col","text":"","code":"update_tbl_col(   id_col,   column_name = NULL,   title = NULL,   uidt = NULL,   dt = NULL,   cdf = NULL,   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/update_tbl_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update NocoDB table column — update_tbl_col","text":"id_col NocoDB column identifier returned tbl_col_id(). character scalar. column_name Column name. Either NULL omit character scalar. title NocoDB column title. Either NULL omit character scalar. uidt NocoDB user interface data type. Either NULL omit one \"Attachment\" \"AutoNumber\" \"Barcode\" \"Button\" \"Checkbox\" \"Collaborator\" \"Count\" \"CreatedBy\" \"CreatedTime\" \"Currency\" \"Date\" \"DateTime\" \"Decimal\" \"Duration\" \"Email\" \"ForeignKey\" \"Formula\" \"GeoData\" \"Geometry\" \"ID\" \"JSON\" \"LastModifiedBy\" \"LastModifiedTime\" \"Links\" \"LinkToAnotherRecord\" \"LongText\" \"Lookup\" \"MultiSelect\" \"Number\" \"Percent\" \"PhoneNumber\" \"QrCode\" \"Rating\" \"Rollup\" \"SingleLineText\" \"SingleSelect\" \"SpecificDBType\" \"Time\" \"URL\" \"User\" \"Year\" . dt Column data type. Either NULL omit character scalar. cdf Column default value. Either NULL omit character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/update_tbl_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update NocoDB table column — update_tbl_col","text":"tibble metadata NocoDB table updated column belongs, invisibly.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/update_user.html","id":null,"dir":"Reference","previous_headings":"","what":"Update NocoDB user — update_user","title":"Update NocoDB user — update_user","text":"Updates metadata specified user NocoDB server via PATCH /api/v1/user/profile API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/update_user.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update NocoDB user — update_user","text":"","code":"update_user(   display_name = NULL,   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = NULL )"},{"path":"https://nocodb.rpkg.dev/dev/reference/update_user.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update NocoDB user — update_user","text":"display_name Name displayed user NocoDB. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/update_user.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update NocoDB user — update_user","text":"tibble metadata updated NocoDB user, invisibly.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/update_user.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update NocoDB user — update_user","text":"user determined based api_token email password (former takes precedence). order API endpoints reflect updated metadata, NocoDB's internal state must update, triggered function iff user updated super admin authentication done via email password instead api_token.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/upload_attachments.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload NocoDB attachments — upload_attachments","title":"Upload NocoDB attachments — upload_attachments","text":"Uploads specified files NocoDB server attachments via POST /api/v2/storage/upload API endpoint. Uploaded files stored /nc/uploads/ configured object storage bucket (one set ) directly server's filesystem.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/upload_attachments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload NocoDB attachments — upload_attachments","text":"","code":"upload_attachments(   paths,   types = mime::guess_type(paths),   names = NULL,   upload_path = \"r\",   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg),   max_tries = 5L,   verbosity = NULL )"},{"path":"https://nocodb.rpkg.dev/dev/reference/upload_attachments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload NocoDB attachments — upload_attachments","text":"paths Paths files uploaded. character vector. types Media type(s) uploaded files. character vector length paths. names File names assign uploaded files. character vector length paths NULL. NULL, original file names paths used. Note random string like _NnW3C always appended resulting file name file type suffix, names = \"-pic.jpg\" result file name like -pic_NnW3C.jpg, example. upload_path Destination path store uploaded file(s) . Always interpreted relative directory /nc/uploads/ (hardcoded NocoDB's source code). character scalar. Note characters . ? replaced _ API. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided. max_tries Maximum number attempts retry case HTTP error. integerish scalar. verbosity much information print? wrapper around req_verbose() uses integer control verbosity: 0: output 1: show headers 2: show headers bodies 3: show headers, bodies, curl status messages. Use with_verbosity() control verbosity requests affect directly.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/upload_attachments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upload NocoDB attachments — upload_attachments","text":"tibble containing metadata uploaded attachments.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/user_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Get NocoDB user ID — user_id","title":"Get NocoDB user ID — user_id","text":"Returns identifier user specified display name NocoDB server.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/user_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get NocoDB user ID — user_id","text":"","code":"user_id(   user_email,   id_base = NULL,   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = pal::pkg_config_val(key = \"api_token\", pkg = this_pkg) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/user_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get NocoDB user ID — user_id","text":"user_email E-mail address user. character scalar. id_base NocoDB base identifier returned base_id(). character scalar. hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/user_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get NocoDB user ID — user_id","text":"User identifier character scalar.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/user_id.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get NocoDB user ID — user_id","text":"id_base provided, user ID determined via base_users(), otherwise via users(). latter requires super admin credentials support api_tokens.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/users.html","id":null,"dir":"Reference","previous_headings":"","what":"List NocoDB users — users","title":"List NocoDB users — users","text":"Returns tibble metadata users NocoDB server GET /api/v1/users API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/users.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List NocoDB users — users","text":"","code":"users(   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg, require = TRUE),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg, require = TRUE) )"},{"path":"https://nocodb.rpkg.dev/dev/reference/users.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List NocoDB users — users","text":"hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate .","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/users.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List NocoDB users — users","text":"tibble.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/users.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List NocoDB users — users","text":"API endpoint support authentication via API tokens. super admin user allowed use API endpoint, .e. provided credentials must belong .","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/validate_user_email.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate NocoDB user e-mail — validate_user_email","title":"Validate NocoDB user e-mail — validate_user_email","text":"Validates user's e-mail address NocoDB server via POST /api/v1/auth/email/validate/{verification_token} API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/validate_user_email.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate NocoDB user e-mail — validate_user_email","text":"","code":"validate_user_email(   verification_token,   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   quiet = FALSE )"},{"path":"https://nocodb.rpkg.dev/dev/reference/validate_user_email.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate NocoDB user e-mail — validate_user_email","text":"verification_token User's e-mail verification token. hostname NocoDB server hostname. character scalar. quiet Whether suppress printing status output internal processing.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/validate_user_email.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate NocoDB user e-mail — validate_user_email","text":"NULL, invisibly.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/validate_user_email.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate NocoDB user e-mail — validate_user_email","text":"can use update_user() get tibble containing user's email_verification_token.","code":""},{"path":[]},{"path":"https://nocodb.rpkg.dev/dev/reference/whoami.html","id":null,"dir":"Reference","previous_headings":"","what":"Get NocoDB user info — whoami","title":"Get NocoDB user info — whoami","text":"Returns tibble metadata specified user NocoDB server via GET /api/v1/auth/user/API endpoint.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/whoami.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get NocoDB user info — whoami","text":"","code":"whoami(   hostname = pal::pkg_config_val(key = \"hostname\", pkg = this_pkg),   email = pal::pkg_config_val(key = \"email\", pkg = this_pkg),   password = pal::pkg_config_val(key = \"password\", pkg = this_pkg),   api_token = NULL,   auth = TRUE )"},{"path":"https://nocodb.rpkg.dev/dev/reference/whoami.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get NocoDB user info — whoami","text":"hostname NocoDB server hostname. character scalar. email E-mail address NocoDB user authenticate . password Password NocoDB user authenticate . api_token NocoDB API token. Takes precedence email password provided. auth Whether include authentication header HTTP request.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/whoami.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get NocoDB user info — whoami","text":"tibble metadata specified NocoDB user.","code":""},{"path":"https://nocodb.rpkg.dev/dev/reference/whoami.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get NocoDB user info — whoami","text":"user determined based api_token email password (former takes precedence). returned columns differ two modes authentication. API endpoint require authentication. invalid api_token provided, request still succeeds generic data guest user returned, auth = FALSE.","code":""},{"path":[]}]
